name: ci-cd

on:
  push:
    branches:
      - main
      - staging
    paths:
      - 'docuzebre/**'
      - 'front/**'
      - 'api/**'
      - 'Dockerfile'
env:
  REGISTRY: registry.numerique-interieur.com
  IMAGE_NAME: ${{ github.repository }}
  K8S_NAMESPACE: docuzebre
  RUNNER: arc-runner
  #ubuntu-22.04

jobs:

  publish-docker-image:
    runs-on: ${{ env.RUNNER }}
    timeout-minutes: 10
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}
          #logout: true
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          #tags: type=semver,pattern={{version}},latest=true
      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .  # Build Docker image from the current directory (i.e., the root of the repository)
          push: true   # Push the built Docker image to GitHub Packages
          tags: |
            ${{ steps.meta.outputs.tags }}
            ghcr.io/user/${{ env.IMAGE_NAME }}:latest
          labels: ${{ steps.meta.outputs.labels }}

  deploy:
    needs: publish-docker-image
    runs-on: ${{ env.RUNNER }}
    timeout-minutes: 10
    steps:
      - name: Wait for the image to be saved in the registry
        run: sleep 1
      - uses: actions/checkout@v4
      - name: Set up Kubeconfig
        env:
          KUBECONFIG_CONTENT: ${{ secrets.KUBE_CONFIG }}
        run: |
          mkdir $HOME/.kube
          echo "$KUBECONFIG_CONTENT" > $HOME/.kube/config
      - uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBE_CONFIG }}

      - uses: azure/k8s-create-secret@v4
        with:
          namespace: ${{env.K8S_NAMESPACE}}
          secret-name: 'registry-secret'
          container-registry-url: registry.numerique-interieur.com/ia-generative/
          container-registry-username: ${{ secrets.REGISTRY_USERNAME }}
          container-registry-password: ${{ secrets.REGISTRY_PASSWORD }}

      - uses: azure/k8s-create-secret@v4
        with:
          namespace: ${{env.K8S_NAMESPACE}}
          secret-name: app-secrets
          secret-type: 'generic'
          string-data: ${{ secrets.APP_SECRETS }}

      - name: Update deployment.yaml (with the image and the new image hash) & deploy 
        run: |
          IMAGE_HASH=${{ github.sha }}
          IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}"
          IMAGE_LOWERCASE=$(echo $IMAGE | tr '[:upper:]' '[:lower:]')
          NAMESPACE=${{ env.K8S_NAMESPACE }}
          
          # Determine URL based on the branch
          if [ "${{ github.ref_name }}" == "main" ]; then
            NAME="docuzebre"
          else
            NAME="docuzebre-staging"
          fi

          URL="c0.cloud-pi-native.com"

          # Declare an array of services
          services=("fastapi" "streamlit")

          # Loop through services to update and deploy
          for service in "${services[@]}"; do
            DEPLOYMENT_FILE="deployments/${service}.yaml"
            # Update deployment file
            sed -i "s|<IMAGE_HASH>|${IMAGE_HASH}|g" $DEPLOYMENT_FILE
            sed -i "s|<IMAGE>|${IMAGE_LOWERCASE}|g" $DEPLOYMENT_FILE
            sed -i "s|<NAMESPACE>|${NAMESPACE}|g" $DEPLOYMENT_FILE
            sed -i "s|<URL>|${URL}|g" $DEPLOYMENT_FILE
            sed -i "s|<NAME>|${NAME}|g" $DEPLOYMENT_FILE
            sed -i "s|<SERVICE>|${service}|g" $DEPLOYMENT_FILE

            # Display updated deployment file
            cat ./$DEPLOYMENT_FILE
            
            # Apply the deployment
            kubectl apply -f ./$DEPLOYMENT_FILE -n ${{ env.K8S_NAMESPACE }}
          done
  # test-deployement:
  #   needs: deploy
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Wait for the service to be ready
  #       run: sleep 60

  #     - name: Test Service Availability
  #       run: |
  #         URL="http://${{ github.event.repository.name }}.c0.cloud-pi-native.com"
  #         STATUS=$(curl -s -L -o /dev/null -w '%{http_code}' $URL)
  #         if [ $STATUS -ne 200]; then
  #           echo "Service is not running or returned an unexpected error"
  #           exit 1
  #         fi